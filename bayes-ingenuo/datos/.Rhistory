install.packages("tidyverse", dependencies = TRUE)
install.packages("datos")
pinguinos <- datos::pinguinos
View(pinguinos)
ggplot(data = pinguinos,
mapping = aes(x = largo_pico_mm,
y = largo_aleta_mm,
color = especie,
size = masa_corporal_g)) + geom_point()
install.packages("ggplot2")
library(ggplot2)
head(pinguinos)
ggplot(data = pinguinos,
mapping = aes(x = largo_pico_mm,
y = largo_aleta_mm,
color = especie,
size = masa_corporal_g)) + geom_point()
install.packages("ggplot2")
library(ggplot2)
ggplot(data = pinguinos,
mapping = aes(x = largo_pico_mm,
y = largo_aleta_mm,
color = especie,
size = masa_corporal_g)) + geom_point()
install.packages("learnr")
install.packages("ggplot2")
install.packages("gapminder")
install.packages("dplyr")
install.packages("ggplot2")
library(ggplot2)
ggplot(data = pinguinos,
mapping = aes(x = largo_pico_mm,
y = largo_aleta_mm,
color = especie,
size = masa_corporal_g)) + geom_point()
# Cargar librerías necesarias
library(dplyr)
library(ggplot2)
library(datos)
# Cargar dataset de pingüinos
pinguinos <- datos::pinguinos
head(pinguinos)
str(pinguinos)
# Cargar librerías necesarias
library(dplyr)
library(ggplot2)
library(datos)
# Cargar librerías necesarias
library(dplyr)
library(ggplot2)
library(datos)
# Cargar dataset de pingüinos
pinguinos <- datos::pinguinos
head(pinguinos)
str(pinguinos)
# Ejemplo complejo: análisis por isla y especie
analisis_isla <- pinguinos %>%
filter(!is.na(masa_corporal_g)) %>%
group_by(isla, especie) %>%
summarise(masa_media = mean(masa_corporal_g, na.rm = TRUE),
n = n(),
.groups = "drop") %>%
filter(n >= 5) # Solo grupos con suficientes observaciones
ggplot(analisis_isla, aes(x = masa_media,
y = fct_reorder(interaction(especie, isla), masa_media))) +
geom_point(aes(size = n), alpha = 0.7) +
labs(title = "Masa corporal por especie e isla",
subtitle = "Ordenado por masa corporal promedio",
x = "Masa corporal promedio (g)",
y = "Especie - Isla",
size = "N observaciones")
# Cargar librerías necesarias
library(dplyr)
library(ggplot2)
library(datos)
# Cargar dataset de pingüinos
pinguinos <- datos::pinguinos
head(pinguinos)
str(pinguinos)
# OPERACIONES POR COLUMNAS
# select(): elegir columnas específicas
nuevo <- pinguinos %>%
select(especie, isla, masa_corporal_g)
# También por posición
nuevo <- pinguinos %>%
select(c(1:3, 6))
# Helpers para selección
pinguinos %>%
select(starts_with("largo"))
pinguinos %>%
select(contains("pico"))
pinguinos %>%
select(ends_with("mm"))
# rename(): cambiar nombres de columnas
pinguinos_es <- pinguinos %>%
rename(species = especie,
island = isla,
body_mass = masa_corporal_g)
# relocate(): cambiar posición de columnas
pinguinos %>%
relocate(sexo) # sexo queda primera
pinguinos %>%
relocate(sexo, .after = especie) # sexo después de especie
pinguinos %>%
relocate(anio, .before = especie) # año antes de especie
# mutate(): crear nuevas columnas o modificar existentes
pinguinos %>%
mutate(masa_kg = masa_corporal_g / 1000) %>%
select(especie, masa_corporal_g, masa_kg)
pinguinos %>%
mutate(ratio_pico = largo_pico_mm / alto_pico_mm) %>%
select(especie, largo_pico_mm, alto_pico_mm, ratio_pico)
# OPERACIONES POR FILAS
# filter(): seleccionar filas según condiciones
pinguinos %>%
filter(especie == "Adelia")
pinguinos %>%
filter(masa_corporal_g >= 4000)
pinguinos %>%
filter(especie == "Adelia", sexo == "macho")
pinguinos %>%
filter(masa_corporal_g == max(masa_corporal_g, na.rm = TRUE))
# arrange(): ordenar filas
pinguinos %>%
arrange(desc(masa_corporal_g)) %>%
head()
pinguinos %>%
arrange(especie, desc(largo_pico_mm)) %>%
head()
# slice(): seleccionar filas por posición
pinguinos %>%
slice(1:10)
pinguinos %>%
slice_max(masa_corporal_g, n = 5)
# AGRUPACIONES
# group_by(): agrupar datos
por_especie <- pinguinos %>%
group_by(especie)
por_especie %>%
tally() # contar por grupos
# summarise(): resumir grupos
resumen <- pinguinos %>%
group_by(especie) %>%
summarise(
cantidad = n(),
masa_promedio = mean(masa_corporal_g, na.rm = TRUE),
masa_mediana = median(masa_corporal_g, na.rm = TRUE),
largo_pico_max = max(largo_pico_mm, na.rm = TRUE)
)
print(resumen)
# Combinando múltiples operaciones
analisis_completo <- pinguinos %>%
filter(!is.na(sexo), !is.na(masa_corporal_g)) %>%
group_by(especie, sexo) %>%
summarise(
n = n(),
masa_media = mean(masa_corporal_g),
masa_sd = sd(masa_corporal_g),
.groups = "drop"
) %>%
arrange(desc(masa_media))
print(analisis_completo)
# DATOS CON CANTIDADES YA CALCULADAS
conteo_especies <- pinguinos %>%
count(especie)
print(conteo_especies)
# Gráfico de barras básico
ggplot(conteo_especies, aes(x = especie, y = n)) +
geom_col() +
labs(title = "Cantidad de pingüinos por especie",
x = "Especie", y = "Cantidad")
# Barras horizontales (mejor para etiquetas largas)
ggplot(conteo_especies, aes(x = n, y = especie)) +
geom_col() +
labs(title = "Cantidad de pingüinos por especie",
x = "Cantidad", y = "Especie")
# Gráfico de puntos
ggplot(conteo_especies, aes(x = n, y = especie)) +
geom_point(size = 3) +
labs(title = "Cantidad de pingüinos por especie",
x = "Cantidad", y = "Especie")
# Puntos con truncamiento de eje
ggplot(conteo_especies, aes(x = n, y = especie)) +
geom_point(size = 3) +
xlim(50, 160) +
labs(title = "Cantidad de pingüinos por especie",
x = "Cantidad", y = "Especie")
# DATOS SIN CANTIDADES CALCULADAS
# R calcula automáticamente con geom_bar()
ggplot(pinguinos, aes(x = especie)) +
geom_bar() +
labs(title = "Cantidad de pingüinos por especie",
x = "Especie", y = "Cantidad")
# Barras horizontales
ggplot(pinguinos, aes(y = especie)) +
geom_bar() +
labs(title = "Cantidad de pingüinos por especie",
x = "Cantidad", y = "Especie")
# BARRAS AGRUPADAS - múltiples dimensiones
# Por especie y sexo
pinguinos %>%
filter(!is.na(sexo)) %>%
ggplot(aes(x = especie, fill = sexo)) +
geom_bar(position = "dodge") +
labs(title = "Pingüinos por especie y sexo",
x = "Especie", y = "Cantidad")
# Cambiando la variable de agrupación
pinguinos %>%
filter(!is.na(sexo)) %>%
ggplot(aes(x = sexo, fill = especie)) +
geom_bar(position = "dodge") +
labs(title = "Pingüinos por sexo y especie",
x = "Sexo", y = "Cantidad")
# FACETAS (paneles múltiples)
pinguinos %>%
filter(!is.na(sexo)) %>%
ggplot(aes(x = especie)) +
geom_bar() +
facet_wrap(~sexo) +
labs(title = "Pingüinos por especie, separado por sexo",
x = "Especie", y = "Cantidad")
pinguinos %>%
ggplot(aes(x = especie)) +
geom_bar() +
facet_wrap(~isla) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Pingüinos por especie en cada isla",
x = "Especie", y = "Cantidad")
# PROPORCIONES
# Barras apiladas con proporciones
pinguinos %>%
filter(!is.na(sexo)) %>%
ggplot(aes(x = especie, fill = sexo)) +
geom_bar(position = "fill") +
labs(title = "Proporción de sexos por especie",
x = "Especie", y = "Proporción") +
scale_y_continuous(labels = scales::percent)
# Usando coordenadas polares para pie chart
pinguinos %>%
count(especie) %>%
ggplot(aes(x = "", y = n, fill = especie)) +
geom_col() +
coord_polar("y", start = 0) +
theme_void() +
labs(title = "Distribución de especies (pie chart)")
library(forcats)
# EXPLORANDO FACTORES
# Estructura del dataset
str(pinguinos$especie)
str(pinguinos$sexo)
str(pinguinos$isla)
# Ver los niveles de un factor
levels(pinguinos$especie)
levels(pinguinos$sexo)
levels(pinguinos$isla)
# CREANDO FACTORES MANUALMENTE
# Vector de caracteres
meses <- c("Dic", "Abr", "Ene", "Mar")
print(meses)
# Definir niveles en orden lógico
meses_ordenados <- c("Ene","Feb","Mar","Abr","May","Jun",
"Jul","Ago","Sep","Oct","Nov","Dic")
# Crear factor con niveles específicos
meses_factor <- factor(meses, levels = meses_ordenados)
print(meses_factor)
# Intentar agregar un valor inválido
# meses_factor[5] <- "Eme"  # Esto daría warning
# VISUALIZACIÓN SIN ORDENAR FACTORES
# Orden alfabético por defecto
ggplot(pinguinos, aes(y = especie)) +
geom_bar() +
labs(title = "Orden alfabético (por defecto)")
# USANDO fct_relevel() - Orden manual
ggplot(pinguinos, aes(y = fct_relevel(especie, "Barbijo", "Papúa", "Adelia"))) +
geom_bar() +
labs(title = "Orden manual con fct_relevel()",
y = "Especie")
# USANDO fct_infreq() - Orden por frecuencia
ggplot(pinguinos, aes(y = fct_infreq(especie))) +
geom_bar() +
labs(title = "Orden por frecuencia con fct_infreq()",
y = "Especie")
# USANDO fct_infreq() + fct_rev() - Invertir orden
ggplot(pinguinos, aes(y = fct_rev(fct_infreq(especie)))) +
geom_bar() +
labs(title = "Orden por frecuencia invertido",
y = "Especie")
# USANDO fct_reorder() - Ordenar según otra variable
# Masa corporal promedio por especie
masa_promedio <- pinguinos %>%
group_by(especie) %>%
summarise(masa_media = mean(masa_corporal_g, na.rm = TRUE))
ggplot(masa_promedio, aes(x = masa_media, y = fct_reorder(especie, masa_media))) +
geom_point(size = 3) +
labs(title = "Especies ordenadas por masa corporal promedio",
x = "Masa corporal promedio (g)", y = "Especie")
# Ejemplo más complejo con boxplot
pinguinos %>%
filter(!is.na(masa_corporal_g)) %>%
ggplot(aes(x = masa_corporal_g, y = fct_reorder(especie, masa_corporal_g, median))) +
geom_boxplot() +
labs(title = "Especies ordenadas por mediana de masa corporal",
x = "Masa corporal (g)", y = "Especie")
# USANDO fct_lump() - Agrupar categorías menos frecuentes
# Simular datos con más categorías
set.seed(123)
muchas_islas <- pinguinos %>%
mutate(isla_expandida = sample(c("Biscoe", "Dream", "Torgersen",
"Isla A", "Isla B", "Isla C", "Isla D"),
nrow(pinguinos), replace = TRUE,
prob = c(0.3, 0.3, 0.3, 0.025, 0.025, 0.025, 0.025)))
# Ver distribución original
muchas_islas %>%
count(isla_expandida, sort = TRUE)
# Agrupar las menos frecuentes
ggplot(muchas_islas, aes(y = fct_lump(isla_expandida, 3))) +
geom_bar() +
labs(title = "Top 3 islas, resto agrupado como 'Other'",
y = "Isla")
# fct_lump con proporción
ggplot(muchas_islas, aes(y = fct_lump(isla_expandida, prop = 0.1))) +
geom_bar() +
labs(title = "Islas con >10% de observaciones",
y = "Isla")
# APLICANDO EN EL PIPELINE DE dplyr
# Reordenar antes de graficar
pinguinos_ordenados <- pinguinos %>%
mutate(especie = fct_infreq(especie))
ggplot(pinguinos_ordenados, aes(y = especie)) +
geom_bar() +
labs(title = "Usando factor reordenado en el dataset")
# Ejemplo complejo: análisis por isla y especie
analisis_isla <- pinguinos %>%
filter(!is.na(masa_corporal_g)) %>%
group_by(isla, especie) %>%
summarise(masa_media = mean(masa_corporal_g, na.rm = TRUE),
n = n(),
.groups = "drop") %>%
filter(n >= 5) # Solo grupos con suficientes observaciones
ggplot(analisis_isla, aes(x = masa_media,
y = fct_reorder(interaction(especie, isla), masa_media))) +
geom_point(aes(size = n), alpha = 0.7) +
labs(title = "Masa corporal por especie e isla",
subtitle = "Ordenado por masa corporal promedio",
x = "Masa corporal promedio (g)",
y = "Especie - Isla",
size = "N observaciones")
vinos <- read.csv2("winequality-red.csv",dec=".")
vinos <- read.csv2("wine.csv",dec=".")
vinos <- read.csv2("/Wine.csv",dec=".")
vinos <- read.csv2("Wine.csv",dec=".")
vinos <- read.csv2("./Wine.csv",dec=".")
vinos <- read.csv2("./Wine.csv",dec=".")
getwd()
setwd("/home/daro/Documentos/unab/anio_02/cuatrimestre_02/inferencia_estadistica/bayes-ingenuo/datos")
vinos <- read.csv2("./Wine.csv",dec=".")
vinos <- read.csv2("./Wine.csv",dec=".")
"Regresión Lineal Multiple "
#Muestra los campos que son significativos estadisticamente para nuestra variable respuesta
modelo_lineal <- lm(vinos$quality~.,data=vinos)
vinos <- read.csv2("./Wine.csv",dec=".")
"Regresión Lineal Multiple "
#Muestra los campos que son significativos estadisticamente para nuestra variable respuesta
modelo_lineal <- lm(vinos$quality~.,data=vinos)
vinos <- read.csv2("./Wine.csv",dec=".")
"Regresión Lineal Multiple "
#Muestra los campos que son significativos estadisticamente para nuestra variable respuesta
modelo_lineal <- lm(vinos$quality~.,data=vinos)
"Regresión Lineal Multiple "
#Muestra los campos que son significativos estadisticamente para nuestra variable respuesta
modelo_lineal <- lm(vinos$quality~.,data=vinos)
vinos <- read.csv2("Wine.csv",dec=".")
vinos <- read.csv2("Wine.csv",dec=".")
vinos <- read.csv2("Wine.csv",dec=".")
"Regresión Lineal Multiple "
#Muestra los campos que son significativos estadisticamente para nuestra variable respuesta
modelo_lineal <- lm(vinos$quality~.,data=vinos)
View(vinos)
